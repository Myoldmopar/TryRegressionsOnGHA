name: Build and Test

on: pull_request

env:
  shell: bash
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    permissions:
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        include:
#          - os: macos-12
#            generator: "Unix Makefiles"
#            nproc: 3
#            build_target: all
          - os: macos-14
            generator: "Unix Makefiles"
            nproc: 3
            build_target: all
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            nproc: 4
            build_target: all
#          - os: windows-2019
#            generator: "Visual Studio 16 2019"
#            nproc: 4
#            build_target: ALL_BUILD
#          - os: windows-2022
#            generator: "Visual Studio 17 2022"
#            nproc: 4
#            build_target: ALL_BUILD

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.Python_REQUIRED_VERSION }}

      - name: Create Build Directory
        run: cmake -E make_directory ./build/

      - name: Configure CMake
        working-directory: ./build
        run: cmake -G "${{ matrix.generator }}" -DBUILD_TYPE=Release ../

      - name: Build
        working-directory: ./build
        run: cmake --build . -j ${{ matrix.nproc }} --config Release --target ${{ matrix.build_target }}

      - name: Run Tests
        working-directory: ./build
        run: ctest -C Release

      - name: Run Regressions
        if: always()
        id: regressions
        # steps.regressions.conclusion is always "success", but if no regressions, steps.regressions.outcome is "success"
        continue-on-error: true
        run: python build_regression_bundle.py ${{ matrix.os }}

      - uses: actions/upload-artifact@v4
        id: upload_regressions
        if: always() && steps.regressions.outcome == 'failure'
        with:
          name: "regressions-${{ matrix.os }}"
          path: "${{ github.workspace }}/build/regressions"

      - name: Generate Regression Summary GitHub Script
        if: always() && steps.regressions.outcome == 'failure'
        run: python build_regression_summary.py ${{ matrix.os }} ${{ github.run_id }} ${{ steps.upload_regressions.outputs.artifact-url }}

      - uses: actions/github-script@v7
        if: always() && steps.regressions.outcome == 'failure'
        with:
          script: |
            const script = require('${{ github.workspace }}/build/summary.js')
            console.log(script({github, context}))
#            await github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: "# :warning: Regressions Detected\n\n ${{ steps.regressions.outputs.SUMMARY }} \n\n - Build: ${{ matrix.os }}\n - [View Results](https://github.com/Myoldmopar/TryRegressionsOnGHA/actions/runs/${{ github.run_id }})\n - [Download Regressions](${{ steps.upload_regressions.outputs.artifact-url }})"
#            })

      - name: Try a warning
        if: always() && matrix.os == 'windows-2019'
        run: |
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp,line=8::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp,line=10::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"
          echo "::warning file=main.cpp::ESO Small Diffs"

#      - name: Report Failure if Tests or Regressions Failed
#        if: always() && (steps.test.outcome == 'failure' || steps.regressions.outcome == 'failure')
#        run: exit 1

#      - name: Try an error
#        if: ${{ matrix.os == 'macos-12' }}
#        run: |
#          echo "::error file=main.cpp,line=8::ESO Big Diffs"
#          exit 1
